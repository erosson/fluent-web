{"version":3,"sources":["../node_modules/@fluent/dedent/esm/index.js","example.js"],"names":["RE_BLANK","ftl","strings","values","code","lines","reduce","acc","cur","shift","split","first","undefined","test","RangeError","commonIndent","pop","dedented","i","length","line","lineIndent","slice","push","join","enUS","pl","Elm","Example","init","node","document","getElementById","flags"],"mappings":";AA2CC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA1CD,MAAMA,EAAW,WAYF,SAASC,EAAIC,KAAYC,GAChCC,IACAC,EADOH,EAAQI,OAAO,CAACC,EAAKC,IAAQD,EAAMJ,EAAOM,QAAUD,GAC9CE,MAAM,MACnBC,EAAQN,EAAMI,QACdE,QAAUC,IAAVD,IAAwBX,EAASa,KAAKF,GAChC,MAAA,IAAIG,WAAW,qCAErBC,IAAAA,EAAeV,EAAMW,MACrBD,QAAiBH,IAAjBG,IAA+Bf,EAASa,KAAKE,GACvC,MAAA,IAAID,WAAW,gDAErBG,IAAAA,EAAW,GACV,IAAA,IAAIC,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IAAK,CAC/BE,IAAAA,EAAOf,EAAMa,GACbG,EAAaD,EAAKE,MAAM,EAAGP,EAAaI,QACxCE,GAAsB,IAAtBA,EAAWF,OAAXE,CAOAA,GAAAA,IAAeN,EAET,MAAA,IAAID,+CAA+CI,EAAI,MAGjED,EAASM,KAAKH,EAAKE,MAAMP,EAAaI,cARlCF,EAASM,KAAKH,GAUfH,OAAAA,EAASO,KAAK;;;;ACNzB,aApCA,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,iBAmCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjCA,MAAMC,EAAW,EAAA;;;;;;;;;;;;;;IAeXC,EAAS,EAAA;;;;;;;;;;;;;;;;IAkBfC,EAAIC,IAAAA,QAAQC,KAAK,CACfC,KAAMC,SAASC,eAAe,QAC9BC,MAAO,CACL,CAAC,QAASR,GACV,CAAC,KAAMC","file":"example.561d11b4.js","sourceRoot":"../src","sourcesContent":["// A blank line may contain spaces and tabs.\nconst RE_BLANK = /^[ \\t]*$/;\n/**\n * Template literal tag for dedenting Fluent code.\n *\n * Strip the indent of the last line from each line of the input. Remove the\n * first and the last line from the output. The snippet must start on a new\n * line and it must end on a line of its own, with the closing delimiter on a\n * next line.\n *\n * @param strings\n * @param values\n */\nexport default function ftl(strings, ...values) {\n    let code = strings.reduce((acc, cur) => acc + values.shift() + cur);\n    let lines = code.split(\"\\n\");\n    let first = lines.shift();\n    if (first === undefined || !RE_BLANK.test(first)) {\n        throw new RangeError(\"Content must start on a new line.\");\n    }\n    let commonIndent = lines.pop();\n    if (commonIndent === undefined || !RE_BLANK.test(commonIndent)) {\n        throw new RangeError(\"Closing delimiter must appear on a new line.\");\n    }\n    let dedented = [];\n    for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        let lineIndent = line.slice(0, commonIndent.length);\n        if (lineIndent.length === 0) {\n            // Empty blank lines are preserved even if technically they are not\n            // indented at all. This also short-circuits the dedentation logic when\n            // commonIndent.length is 0, i.e. when all indents should be kept.\n            dedented.push(line);\n            continue;\n        }\n        if (lineIndent !== commonIndent) {\n            // The indentation of the line must match commonIndent exacty.\n            throw new RangeError(`Insufficient indentation in line ${i + 1}.`);\n        }\n        // Strip commonIndent.\n        dedented.push(line.slice(commonIndent.length));\n    }\n    return dedented.join(\"\\n\");\n}\n","import flt from \"@fluent/dedent\";\nimport { Elm } from \"./Example.elm\";\n\nconst enUS = flt`\n  hello = Hello, { $userName }!\n  hello-no-name = Hello, stranger!\n  type-name =\n      .placeholder = Your name\n\n  # $date (Date) - Current date, formatted as month and day.\n  today-date = Today is { DATETIME($date) }.\n  # $date (Date) - Current date, formatted as weekday.\n  today-weekday = It's {$date}.\n\n  sign-in-or-cancel = <b>Sign in</b> or <em>cancel</em>.\n  clicked-sign-in = You are now signed in.\n  clicked-cancel = OK, nevermind.\n  `;\nconst pl = flt`\n  hello = Cześć { $userName }!\n  hello-no-name = Witaj nieznajomy!\n  type-name =\n      .placeholder = Twoje imię\n\n  # $date (Date) - Current date, formatted as month and day.\n  today-date = Dziś jest {DATETIME($date)}.\n\n  # Commented out to demonstrate fallback.\n  # $date (Date) - Current date, formatted as weekday.\n  # today-weekday = Jest {$date}.\n\n  sign-in-or-cancel = <b>Zaloguj</b> albo <em>anuluj</em>.\n  clicked-sign-in = Brawo!\n  clicked-cancel = OK, nieważne.\n  `;\n\nElm.Example.init({\n  node: document.getElementById(\"root\"),\n  flags: [\n    [\"en-US\", enUS],\n    [\"pl\", pl],\n  ],\n});\n"]}